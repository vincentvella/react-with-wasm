{"version":3,"sources":["functions/fibonacci.ts","functions/index.ts","functions/alert.ts","hooks/use-wasm.ts","components/wasm-button.tsx","hooks/use-timer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["fibonacci","Alert","alert","Fibonacci","n","useWasm","useState","loading","setLoading","wasm","setWasm","a","useEffect","loadWASM","WasmButton","props","handleClick","disabled","onClick","useTimer","func","start","setStart","end","setEnd","execute","Date","getUTCMilliseconds","Functions","App","BigInt","rustFibonacciExecute","rustFibonacciRuntime","num","fibonacciExecute","fibonacciRuntime","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAOeA,ICJA,GAAEC,MCHF,WACbC,MAAM,0BDEgBC,UDHxB,SAASH,EAAUI,GACjB,OAAIA,GAAK,EACA,EAEFJ,EAAUI,EAAI,GAAKJ,EAAUI,EAAI,K,uBGoB3BC,MApBf,WAAoB,IAAD,EACaC,oBAAS,GADtB,mBACVC,EADU,KACDC,EADC,OAEOF,qBAFP,mBAEVG,EAFU,KAEJC,EAFI,gDAIjB,4BAAAC,EAAA,qEAEIH,GAAW,GAFf,SAGuB,6BAHvB,OAGUC,EAHV,OAIIC,EAAQD,GAJZ,uBAMID,GAAW,GANf,sEAJiB,sBAiBjB,OAHAI,oBAAU,YAdO,mCAefC,IACC,IACI,CAACJ,EAAMF,ICJDO,MARf,SAAgDC,GAA4B,IAAD,EACjDV,IADiD,mBAClEI,EADkE,KAC5DF,EAD4D,KAEjES,EAAgBD,EAAhBC,YACR,OAAKP,EACDF,EAAgB,4BAAQU,UAAQ,GAAhB,cACb,4BAAQC,QAAS,kBAAMF,EAAYP,KAAnC,YAFW,MCOLU,EAjBuD,SACpEC,GACI,IAAD,EACuBd,qBADvB,mBACIe,EADJ,KACWC,EADX,OAEmBhB,qBAFnB,mBAEIiB,EAFJ,KAESC,EAFT,KAIGC,EAAU,SAAChB,GACfa,EAAS,IAAII,MACbN,EAAKX,GACLe,EAAO,IAAIE,OAGb,OAAKL,GAAUE,EAER,CAACE,EADQF,EAAII,qBAAuBN,EAAMM,sBADtB,CAACF,EAAS,OCN/BtB,EAAcyB,EAAdzB,UA6BO0B,EA3BO,WACpB,IAD0B,EAG2BV,EAF/B,SAACV,GAAD,OAAsBA,EAAKT,UAAU8B,OAAO,OADxC,mBAGnBC,EAHmB,KAGGC,EAHH,OAImBb,EAFzB,SAACc,GAAD,OAAiB9B,EAAU8B,KAFrB,mBAInBC,EAJmB,KAIDC,EAJC,KAK1B,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,qCACA,4CAEF,6BACA,uDACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAYpB,YAAae,IACzB,4BAAQb,QAAS,kBAAMgB,EAAiB,MAAxC,aAEF,yBAAKE,UAAU,OACb,6BAAMJ,GAAoB,UAAOA,EAAP,QAC1B,6BAAMG,GAAgB,UAAOA,EAAP,YClBZE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.859f54ee.chunk.js","sourcesContent":["function fibonacci(n: number): number {\n  if (n <= 2) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nexport default fibonacci;\n","import Alert from \"./alert\";\nimport Fibonacci from \"./fibonacci\";\n\nexport default { Alert, Fibonacci };\n","export default function() {\n  alert(\"Hello, person's name!\");\n}\n","import { useEffect, useState } from \"react\";\n\nimport { WasmModule } from \"../types\";\n\nfunction useWasm() {\n  const [loading, setLoading] = useState(false);\n  const [wasm, setWasm] = useState<WasmModule>();\n\n  async function loadWASM() {\n    try {\n      setLoading(true);\n      const wasm = await import(\"wasm-lib\");\n      setWasm(wasm);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    loadWASM();\n  }, []);\n  return [wasm, loading];\n}\n\nexport default useWasm;\n","import { WasmFunction, WasmModule } from \"../types\";\n\nimport React from \"react\";\nimport useWasm from \"../hooks/use-wasm\";\n\ninterface WasmButtonProps<T extends keyof WasmModule> {\n  handleClick: WasmFunction<T>;\n}\n\nfunction WasmButton<T extends keyof WasmModule>(props: WasmButtonProps<T>) {\n  const [wasm, loading] = useWasm();\n  const { handleClick } = props;\n  if (!wasm) return null;\n  if (loading) return <button disabled>Loading...</button>;\n  return <button onClick={() => handleClick(wasm)}>Click me</button>;\n}\n\nexport default WasmButton;\n","import { useState } from \"react\";\n\nconst useTimer: (func: any) => [(wasm: any) => void, number | null] = (\n  func: any\n) => {\n  const [start, setStart] = useState<Date>();\n  const [end, setEnd] = useState<Date>();\n\n  const execute = (wasm: any) => {\n    setStart(new Date());\n    func(wasm);\n    setEnd(new Date());\n  };\n\n  if (!start || !end) return [execute, null];\n  const runtime = end.getUTCMilliseconds() - start.getUTCMilliseconds();\n  return [execute, runtime];\n};\n\nexport default useTimer;\n","import \"./App.css\";\n\nimport Functions from \"./functions\";\nimport React from \"react\";\nimport { WasmButton } from \"./components\";\nimport { WasmModule } from \"./types\";\nimport useTimer from \"./hooks/use-timer\";\n\nconst { Fibonacci } = Functions;\n\nconst App: React.FC = () => {\n  const rustFibonacci = (wasm: WasmModule) => wasm.fibonacci(BigInt(35));\n  const jsFibonacci = (num: number) => Fibonacci(num);\n  const [rustFibonacciExecute, rustFibonacciRuntime] = useTimer(rustFibonacci);\n  const [fibonacciExecute, fibonacciRuntime] = useTimer(jsFibonacci);\n  return (\n    <div className=\"container\">\n      <div className=\"actionContainer\">\n        <div className=\"row\">\n          <div>Rust</div>\n          <div>Javascript</div>\n        </div>\n        <hr />\n        <div>Fibonacci Example (35)</div>\n        <div className=\"row\">\n          <WasmButton handleClick={rustFibonacciExecute} />\n          <button onClick={() => fibonacciExecute(35)}>Click Me</button>\n        </div>\n        <div className=\"row\">\n          <div>{rustFibonacciRuntime && `${rustFibonacciRuntime} ms`}</div>\n          <div>{fibonacciRuntime && `${fibonacciRuntime} ms`}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}